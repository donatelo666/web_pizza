<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/editar.css" />
    <!--union con css-->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <!--fuentes de google -->
    <link
      href="https://fonts.googleapis.com/css2?family=Lemon&family=Sigmar&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.8/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-sRIl4kxILFvY47J16cr9ZwB07vP4J8+LH7qKQnuqkuIAvNWLzeN8tE5YBujZqJLB"
      crossorigin="anonymous"
    />
    <!--bootstrap-->

    <!--color de fondo  -->
    <style>
      body {
        background-color: #5293dd;
      }
    </style>

    <title>Ordenar</title>
  </head>

  <body>
    <!--header con css-->
    <header class="head">
      <p>Ordenar pizzas en TMNT</p>
    </header>

    <!-- Solo visible si el usuario es administrador-->
    <div id="adminLinks" style="display: none">
      <a href="/admin/panel">Panel Admin</a>
    </div>
    <!--scrpt para acceder a las pesta√±as d administracion -->
    <script>
      const token = localStorage.getItem("token");
      if (token) {
        const payload = JSON.parse(atob(token.split(".")[1]));
        if (payload.rol === "admin") {
          document.getElementById("adminLinks").style.display = "block";
        }
      }
    </script>

    <!--formulario para agregar al carrito y funcion de enviar orden de varias pizzas-->
    <form id="form-pizza">
      <h3>Carrito de pizzas</h3>
      <br />

      <label for="nombre">Nombre:</label>
      <input
        type="text"
        id="nombre"
        name="nombre"
        required
        pattern="[A-Za-z0-9 ]{4,20}"
        placeholder="Minimo 4 y maximo 20 caracteres"
      /><br /><br />

      <label for="telefono">Tel√©fono celular:</label>
      <input
        type="text"
        id="telefono"
        name="telefono"
        required
        pattern="[0-9]{10,10}"
        placeholder="10 digitos"
      /><br /><br />

      <label for="tamano">Tama√±o:</label>

      <select id="tamano" name="tamano" required pattern="[A-Za-z]{4,10}">
        <option value="">-- Selecciona una Tama√±o --</option>
        <option value="personal">Personal</option>
        <option value="mediana">Mediana</option>
        <option value="familiar">Familiar</option>
      </select>

      <br />

      <label for="sabor">Sabor:</label>
      <select id="sabor" name="sabor" required pattern="[A-Za-z]{4,20}">
        <option value="">-- Selecciona un sabor --</option>
        <option value="champi√±ones">Champi√±ones</option>
        <option value="hawaiana">Hawaiana</option>
        <option value="mexicana">Mexicana</option>
        <option value="salami">Salami y cabano</option></select
      ><br />
      <button type="submit" class="agregar">Agregar al carrito</button>
    </form>
    <!-- Contenedor principal del carrito con bootstrap-->
    <div class="container mt-4">
      <h2 class="mb-3">üõí Tu Carrito</h2>

      <div id="carrito-contenido" class="row g-3"></div>
      <!-- Aqu√≠ se insertan las pizzas como tarjetas -->

      <div class="d-flex justify-content-between mt-4">
        <button onclick="enviarOrden()" class="btn btn-success">
          Enviar orden</button
        ><!--boton-->
        <span id="contador-carrito" class="badge bg-primary fs-5">0 pizzas</span
        ><!--contador de pizza en carrito -->
      </div>

      <script>
        const carrito = []; // pone el carrito vacio

        //notificacion que muestra todos los ids , recorre los ids con html y una coma con espacio
        //envia mensaje con html
        function mostrarNotificacion(ids) {
          const listaIds = ids.map((id) => `<strong>${id}</strong>`).join(", ");
          const mensaje = `
    ‚úÖ Orden enviada con √©xito<br><br>
    IDs generados: ${listaIds}<br>
    Guarda estos n√∫meros para consultar, editar o eliminar tus √≥rdenes.
  `;

          const notificacion = document.getElementById("notificacion");
          notificacion.innerHTML = mensaje;
          notificacion.classList.remove("d-none"); //quita el estado invisible
          notificacion.classList.add("show"); // muestra la notificacion

          setTimeout(() => {
            notificacion.classList.add("d-none");
            notificacion.classList.remove("show");
          }, 25000); //muestra por 25 segundos y despues borra
        }

        document
          .getElementById("form-pizza") //toma los datos del formulario
          .addEventListener("submit", function (e) {
            e.preventDefault(); //previene el borrado del formulario
            const form = e.target;

            const nuevaPizza = {
              nombre: form.nombre.value,
              telefono: form.telefono.value,
              tamano: form.tamano.value,
              sabor: form.sabor.value,
            }; //convierte los datos del formulario en un objeto jason

            carrito.push(nuevaPizza); //Agrega esa pizza al arreglo carrito, que act√∫a como una lista temporal de √≥rdenes.

            mostrarCarrito(); //muestra info del carrito por pantalla
            form.reset(); // pone en blanco el formulario para agregar mas pizzas
          });

        function mostrarCarrito() {
          const contenedor = document.getElementById("carrito-contenido");
          contenedor.innerHTML = "";

          carrito.forEach((item, index) => {
            const div = document.createElement("div");
            div.className = "col-md-6 col-lg-4";

            div.innerHTML = `
      <div class="card shadow-sm">
        <div class="card-body">
          <h5 class="card-title">${item.nombre}</h5>
          <p class="card-text">
            <strong>Tel√©fono:</strong> ${item.telefono}<br>
            <strong>Tama√±o:</strong> ${item.tamano}<br>
            <strong>Sabor:</strong> ${item.sabor}
          </p>
          <button class="btn btn-danger btn-sm" onclick="eliminarDelCarrito(${index})">Eliminar</button>
        </div>
      </div>
    `;

            contenedor.appendChild(div);
          });

          document.getElementById(
            "contador-carrito"
          ).textContent = `${carrito.length} pizzas`;
        } //construye con html el carrito en pantalla y la info del formulario mas boton de eliminar
        //estilos de bootstrap

        function eliminarDelCarrito(index) {
          carrito.splice(index, 1);
          mostrarCarrito();
        } //elimina el index 1 del carrito y refresca la pantalla

        function enviarOrden() {
          if (carrito.length === 0) {
            alert("Tu carrito est√° vac√≠o");
            return;
          } //error del carrito vacio

          const token = localStorage.getItem("token"); // define el token
          const idsEnviados = []; //crea  el array de ids vacio
          let pendientes = carrito.length; //define pendientes

          carrito.forEach((orden) => {
            fetch("http://localhost:3000/api/ordenes/", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                Authorization: token, // pone el token
              },
              body: JSON.stringify(orden), // convierte el array en objeto jason
            })
              .then((res) => {
                if (!res.ok) throw new Error(`Error ${res.status}`);
                return res.json();
              })
              .then((data) => {
                idsEnviados.push(data.id);
                pendientes--;

                if (pendientes === 0) {
                  mostrarNotificacion(idsEnviados);
                  carrito.length = 0;
                  mostrarCarrito(); //pone el carrito en cero cuando pendientes esta en cero
                }
              })
              .catch((err) => {
                console.error("Error al enviar orden:", err);
                alert("Error al enviar la orden: " + err.message);
              });
          });
        }
      </script>

      <!-- div de la Notificaci√≥n -->
      <div
        id="notificacion"
        class="alert alert-success mt-4 d-none"
        role="alert"
      ></div>
    </div>

    <!--formulario para consultar una orden realizada , pide el id de la orden en texto
    campo obligatorio , y boton con submit-->
    <form id="consultar">
      <h3>Consultar mi orden</h3>

      <label for="Orden_id">Id de la orden:</label>
      <input
        type="number"
        id="Orden_id"
        name="Orden_id"
        required
        pattern="[0-9]{1,999}"
      /><br /><br />
      <button type="submit" class="consultar">Consultar orden</button>
    </form>
    <!--div que contiene la tabla con informacion de la base de datos de la consulta-->
    <div id="resultado"></div>
    <!--script que toma el id del formulario con evento submit y prevencion de recarga
    toma el id y el token -->
    <script>
      document
        .getElementById("consultar")
        .addEventListener("submit", function (e) {
          e.preventDefault();

          const ordenId = document.getElementById("Orden_id").value;
          const token = localStorage.getItem("token");
          //usa la api get y pone el token
          fetch(`http://localhost:3000/ordenes/${ordenId}`, {
            method: "GET",
            "Content-Type": "application/json",
            headers: { Authorization: token }, // ‚úÖ aqu√≠ va el token
          })
            .then((response) => {
              if (!response.ok) {
                if (response.status === 404) {
                  throw new Error("Orden no encontrada"); //error
                } else {
                  throw new Error("Error al consultar la orden"); //error
                }
              }
              return response.json();
            })
            .then((data) => {
              // Construir la tabla con los datos de la base de datos
              //usa html , tiene estilos
              const tablaHTML = `
                <table border="1" cellpadding="8" cellspacing="0">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Nombre</th>
                            <th>Telefono</th>
                            <th>Tama√±o</th>
                            <th>Sabor</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>${data.id}</td>
                            <td>${data.nombre}</td>
                            <td>${data.telefono}</td>
                            <td>${data.tamano}</td>
                            <td>${data.sabor}</td>
                        </tr>
                    </tbody>
                </table>
            `; //ingresa la tabla contruida al div resultado para mostrar al usuario
              document.getElementById("resultado").innerHTML = tablaHTML;
            })
            .catch((error) => {
              document.getElementById(
                "resultado"
              ).innerHTML = `<p style="color:red;">${error.message}</p>`;
            }); // error
        });
    </script>

    <!--formulario para actualizar orden con id de campo obligatorio , y boton tipo submit -->
    <form id="editar">
      <h3>Editar mi orden</h3>
      <label for="edit_id">ID:</label>
      <input
        type="number"
        id="edit_id"
        name="edit_id"
        required
        pattern="[0-9]{1,999}"
      /><br />

      <label for="edit_nombre">Nombre:</label>
      <input
        type="text"
        id="edit_nombre"
        name="edit_nombre"
        pattern="[A-Za-z0-9]{4,20}"
        placeholder="Minimo 4 y maximo 20 caracteres"
      /><br />

      <label for="edit_telefono">Telefono celular:</label>
      <input
        type="number"
        id="edit_telefono"
        name="edit_telefono"
        pattern="[0-9]{7,10}"
        placeholder="10 digitos"
      /><br />

      <label for="edit_tamano">Tama√±o:</label>
      <br />
      <select id="edit_tamano" name="edit_tamano" required>
        <option value="">-- Selecciona una Tama√±o --</option>
        <option value="personal">Personal</option>
        <option value="mediana">Mediana</option>
        <option value="familiar">Familiar</option>
      </select>
      <br /><br />
      <label for="edit_sabor">Sabor:</label>
      <br />
      <select id="edit_sabor" name="edit_sabor" required>
        <option value="">-- Selecciona un sabor --</option>
        <option value="champi√±ones">Champi√±ones</option>
        <option value="hawaiana">Hawaiana</option>
        <option value="mexicana">Mexicana</option>
        <option value="salami">Salami y cabano</option>
      </select>
      <br /><br />

      <button type="submit" class="actualizar">Actualizar orden</button
      ><br /><br />
    </form>
    <!--script que toma la informacion del formulario con evento submit, previene la recarga
    crea variables y el token , usa la api put del sever , pone el token -->
    <script>
      function mostrarNotificacion2() {
        const mensaje = `‚úÖ Muy bien<br><br>tu orden ha sido actualizada y<br><br>pronto estara en el horno. `;
        const notificacion = document.getElementById("notificacion2");
        notificacion.innerHTML = mensaje;
        notificacion.classList.remove("oculto"); //quita el oculto del div que contiene la notificaion
        notificacion.classList.add("visible"); // define funcion que muestra una notificacion
        //  con estilos
        //mensaje para el usuario , la pone en modo "visible"

        // Ocultar despu√©s de 25 segundos , remueve visible despues de 25 segundos y pone oculto
        // a la notificacion
        setTimeout(() => {
          notificacion.classList.remove("visible");
          notificacion.classList.add("oculto");
        }, 25000);
      }

      document
        .getElementById("editar")
        .addEventListener("submit", function (e) {
          e.preventDefault();

          const id = document.getElementById("edit_id").value;
          const nombre = document.getElementById("edit_nombre").value;
          const telefono = document.getElementById("edit_telefono").value;
          const tamano = document.getElementById("edit_tamano").value;
          const sabor = document.getElementById("edit_sabor").value;
          const token = localStorage.getItem("token");

          fetch(`http://localhost:3000/ordenes/${id}`, {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
              Authorization: token, // ‚úÖ aqu√≠ va el token
            },
            //convierte el archivo a jason
            body: JSON.stringify({ nombre, telefono, tamano, sabor }),
          })
            .then((response) => response.json())
            .then((data) => {
              mostrarNotificacion2(); // ejecuta la funcion y muestra la notificacion
            })
            .catch((error) => {
              console.error(error);
              alert("Error al actualizar la orden"); // mensaje de error
            });
        });
    </script>
    <!--div de la notificacion2 para mostrarla en pantalla-->
    <div id="notificacion2" class="oculto"></div>

    <!--formulario para eliminar con campo id y boton submit -->
    <form id="eliminarOrden">
      <h3>Eliminar mi orden</h3>

      <label for="Orden_id">Id de la orden:</label>
      <input
        type="number"
        id="idOrden"
        name="Orden_id"
        pattern="[0-9]{1,999}"
      /><br /><br />
      <button id="eliminar" type="submit">Eliminar</button>
    </form>
    <!-- lee el dom de la pagina para evitar errores , toma la info del formulario 
     con submit y previene recarga-->
    <script>
      function eliminarOrden(ordenId) {
        const token = localStorage.getItem("token");

        fetch(`http://localhost:3000/ordenes/${ordenId}`, {
          method: "DELETE",
          headers: {
            Authorization: token,
          },
        })
          .then((response) => {
            if (!response.ok) {
              if (response.status === 403) {
                throw new Error("No tienes permiso para eliminar esta orden");
              } else if (response.status === 404) {
                throw new Error("Orden no encontrada");
              } else {
                throw new Error("Error al eliminar la orden");
              }
            }
            return response.json();
          })
          .then((data) => {
            mostrarNotificacion3();
            document.getElementById("eliminarOrden").reset();
          })
          .catch((error) => {
            console.error(error);
            alert(error.message);
          });
      }
      //modal que confirma con el usuario si quiere eliminar o no
      function mostrarModalEliminar(ordenId) {
        document.getElementById("ordenIdTexto").textContent = ordenId;
        const modal = document.getElementById("modalConfirmacion");
        modal.classList.remove("modal-oculto");
        modal.classList.add("modal-visible");

        // Confirmar eliminaci√≥n, llamando a la funcion que contiene el fetch
        document.getElementById("btnConfirmarEliminar").onclick = () => {
          modal.classList.remove("modal-visible");
          modal.classList.add("modal-oculto");
          eliminarOrden(ordenId); // tu funci√≥n para eliminar
        };

        // Cancelar
        document.getElementById("btnCancelarEliminar").onclick = () => {
          modal.classList.remove("modal-visible");
          modal.classList.add("modal-oculto");
        };
      }

      function mostrarNotificacion3() {
        const mensaje = `‚úÖ Muy bien , tu orden  ha sido eliminada con exito. <br><br>`;
        const notificacion = document.getElementById("notificacion3");
        notificacion.innerHTML = mensaje;
        notificacion.classList.remove("oculto"); //quita el oculto del div que contiene la notificaion
        notificacion.classList.add("visible"); // define funcion que muestra una notificacion
        //  con estilos
        //mensaje para el usuario , la pone en modo "visible"

        // Ocultar despu√©s de 25 segundos , remueve visible despues de 25 segundos y pone oculto
        // a la notificacion
        setTimeout(() => {
          notificacion.classList.remove("visible");
          notificacion.classList.add("oculto");
        }, 25000);
      }
      document.addEventListener("DOMContentLoaded", () => {
        document
          .getElementById("eliminarOrden")
          .addEventListener("submit", function (e) {
            e.preventDefault();
            //toma el valor ingresado le quita espacios y envia un console log
            const ordenId = document.getElementById("idOrden").value.trim();
            console.log("ID ingresado:", `"${ordenId}"`);
            //agrega token
            const token = localStorage.getItem("token");
            if (!token) {
              alert("No est√°s autenticado. Inicia sesi√≥n primero.");
              return; // error por no tener token
            }

            if (!ordenId || ordenId.length === 0) {
              alert("Por favor ingresa el ID de la orden");
              return; //error por no ingresar el id
            }
            //confirma con el usuario y llama la notificacion con dos botones
            mostrarModalEliminar(ordenId);
          });
      });
    </script>

    <div id="modalConfirmacion" class="modal-oculto">
      <div class="modal-contenido">
        <h3>¬øEliminar orden #<span id="ordenIdTexto"></span>?</h3>
        <p>Esta acci√≥n no se puede deshacer.</p>
        <button id="btnConfirmarEliminar" class="btn btn-danger">
          S√≠, eliminar
        </button>
        <button id="btnCancelarEliminar" class="btn btn-secondary">
          Cancelar
        </button>
      </div>
    </div>

    <!--pone la notificaion en oculto que despues se activa a modo visible para formulario de ordenar -->
    <div id="notificacion3" class="oculto"></div>

    <!--footer con boton de retorno a pagina anterior y css -->
    <footer class="footer_editar">
      <a href="/inicio" class="inicio-btn" id="inicio-btn">Inicio</a>
      <a href="/contacto" class="contacto-btn" id="contact-btn">Contacto</a>

      <a href="/menu" class="menu-btn" id="menu-btn">Menu</a>

      <!--boton de cerrar sesion -->
      <button id="logout" class="logout-btn">Cerrar sesi√≥n</button>
    </footer>

    <!--div de cerrar sesion -->
    <div id="Notificacion4" class="oculto"></div>
    <!--script que escucha el submit para cerrar-->
    <script>
      function mostrarNotificacion4() {
        //mensaje para el usuario , la pone en modo "visible"
        const mensaje = `‚úÖ Sesion cerrada<br>
    Ser√°s redirigido a la p√°gina de inicio en unos segundos...<br><br>
    <button id="btnIrInicio" class="btn btn-light">Ir ahora</button>`;
        const notificacion = document.getElementById("Notificacion4");
        notificacion.innerHTML = mensaje;
        notificacion.classList.remove("oculto"); //quita el oculto del div que contiene la notificaion
        notificacion.classList.add("visible"); // define funcion que muestra una notificacion
        //  con estilos
      }

      document.getElementById("logout").addEventListener("click", () => {
        localStorage.removeItem("token"); // ‚úÖ elimina el token al usuario
        mostrarNotificacion4(); // ejecuta la funcion y muestra la notificacion
        //redirige a la siguiente pagina si el usuario espera

        document.getElementById("btnIrInicio").addEventListener("click", () => {
          clearTimeout(redireccion); // cancela el temporizador
          window.location.href = "/inicio"; // link para pagina inicio
        });

        const redireccion = setTimeout(() => {
          window.location.href = "/inicio";
        }, 10000);
        // üß≠ Redirige inmediatamente si el usuario hace clic en el bot√≥n
      });
    </script>

    <!--script de bootstrap-->
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.8/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-FKyoEForCGlyvwx9Hj09JcYn3nv7wiPVlz7YYwJrWVcXK/BmnVDxM+D2scQbITxI"
      crossorigin="anonymous"
    ></script>
  </body>
</html>
